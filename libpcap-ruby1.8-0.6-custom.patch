diff -r -U3 libpcap-ruby1.8-0.6/ChangeLog libpcap-ruby1.8-0.6-custom/ChangeLog
--- libpcap-ruby1.8-0.6/ChangeLog	2000-08-13 09:54:08.000000000 +0300
+++ libpcap-ruby1.8-0.6-custom/ChangeLog	2006-02-27 11:58:25.000000000 +0200
@@ -1,3 +1,10 @@
+2006-02-26  Boaz Goldstein  <shazam@t2.technion.ac.il>
+	* Added get_packet
+	* Now requires pcap 0.8, extconf.rb updated
+
+2006-01-17  Ohad Lutzky  <slutzky@t2.technion.ac.il>
+	* Added support for findalldevs (returns names only)
+
 2000-08-13  Masaki Fukushima  <fukusima@goto.info.waseda.ac.jp>
 
 	* version 0.6 released.
diff -r -U3 libpcap-ruby1.8-0.6/extconf.rb libpcap-ruby1.8-0.6-custom/extconf.rb
--- libpcap-ruby1.8-0.6/extconf.rb	2000-08-01 17:48:37.000000000 +0300
+++ libpcap-ruby1.8-0.6-custom/extconf.rb	2006-02-27 11:53:53.000000000 +0200
@@ -10,7 +10,10 @@
 have_library("socket", "socket")
 have_library("xnet", "gethostbyname")
 have_func("hstrerror")
-if have_header("pcap.h") && have_library("pcap", "pcap_open_live")
+
+if not have_library("pcap", "pcap_next_ex")
+  puts 'This version of libpcap-ruby requires libpcap0.8 and its headers.'
+elsif have_header("pcap.h") && have_library("pcap", "pcap_open_live")
   have_func("pcap_compile_nopcap")
   create_makefile("pcap")
 end
diff -r -U3 libpcap-ruby1.8-0.6/lib/pcap_misc.rb libpcap-ruby1.8-0.6-custom/lib/pcap_misc.rb
--- libpcap-ruby1.8-0.6/lib/pcap_misc.rb	1999-11-03 08:35:19.000000000 +0200
+++ libpcap-ruby1.8-0.6-custom/lib/pcap_misc.rb	2006-02-27 10:04:48.000000000 +0200
@@ -6,7 +6,7 @@
     end
 
     def inspect
-      "#<#{type}: #{self}>"
+      "#<#{self.class}: #{self}>"
     end
   end
 
diff -r -U3 libpcap-ruby1.8-0.6/Pcap.c libpcap-ruby1.8-0.6-custom/Pcap.c
--- libpcap-ruby1.8-0.6/Pcap.c	2000-08-13 08:56:31.000000000 +0300
+++ libpcap-ruby1.8-0.6-custom/Pcap.c	2006-02-27 10:04:48.000000000 +0200
@@ -54,6 +54,29 @@
 }
 
 static VALUE
+pcap_s_findalldevs(self)
+    VALUE self;
+{
+    pcap_if_t *alldevsp;
+    VALUE return_ary;
+    char pcap_errbuf[PCAP_ERRBUF_SIZE];
+
+    return_ary = rb_ary_new();
+
+    pcap_findalldevs(&alldevsp, pcap_errbuf);
+
+    if (alldevsp == NULL) // List is empty, probably an error
+	    rb_raise(ePcapError, "%s", pcap_errbuf);
+    
+    for (; alldevsp->next != NULL; alldevsp = alldevsp->next)
+            rb_ary_push(return_ary, rb_str_new2(alldevsp->name));
+
+    pcap_freealldevs(alldevsp);
+    
+    return return_ary;
+}
+
+static VALUE
 pcap_s_lookupnet(self, dev)
     VALUE self;
     VALUE dev;
@@ -181,6 +204,9 @@
     /* setup instance */
     self = Data_Make_Struct(class, struct capture_object,
 			    0, free_capture, cap);
+    if(pcap_setnonblock(pcap,1,pcap_errbuf) == -1)
+	    rb_raise(ePcapError,"%s",pcap_errbuf);
+	    
     cap->pcap = pcap;
     cap->netmask = netmask;
     cap->dl_type = pcap_datalink(pcap);
@@ -274,6 +300,24 @@
 int pcap_read(pcap_t *, int cnt, pcap_handler, u_char *); /* pcap-int.h */
 
 static VALUE
+get_packet(self)
+     VALUE self;
+{
+    struct capture_object *cap;
+    const u_char * data;
+    struct pcap_pkthdr * pkthdr;
+    int stat;
+
+    GetCapture(self, cap);
+
+    stat = pcap_next_ex(cap->pcap, &pkthdr,&data);
+    if(stat==1)
+	    return new_packet(data, pkthdr, cap->dl_type);
+    else
+	    return Qnil;
+}
+
+static VALUE
 capture_loop(argc, argv, self)
      int argc;
      VALUE *argv;
@@ -723,6 +767,7 @@
     /* define module Pcap */
     mPcap = rb_define_module("Pcap");
     rb_define_module_function(mPcap, "lookupdev", pcap_s_lookupdev, 0);
+    rb_define_module_function(mPcap, "findalldevs", pcap_s_findalldevs, 0);
     rb_define_module_function(mPcap, "lookupnet", pcap_s_lookupnet, 1);
     rb_global_variable(&rbpcap_convert);
     rb_define_singleton_method(mPcap, "convert?", pcap_s_convert, 0);
@@ -760,6 +805,7 @@
     rb_define_method(cCapture, "snapshot", capture_snapshot, 0);
     rb_define_method(cCapture, "snaplen", capture_snapshot, 0);
     rb_define_method(cCapture, "stats", capture_stats, 0);
+    rb_define_method(cCapture, "get_packet", get_packet, 0);
 
     /* define class Dumper */
     cDumper = rb_define_class_under(mPcap, "Dumper", rb_cObject);
@@ -780,11 +826,7 @@
     /*rb_define_method(cFilter, "&", filter_and, 1);*/
 
     /* define class PcapStat */
-    cPcapStat = rb_funcall(rb_cStruct, rb_intern("new"), 4,
-			   Qnil,
-			   INT2NUM(rb_intern("recv")),
-			   INT2NUM(rb_intern("drop")),
-			   INT2NUM(rb_intern("ifdrop")));
+    cPcapStat = rb_struct_define(NULL, "recv", "drop", "ifdrop", NULL);
     rb_define_const(mPcap, "Stat", cPcapStat);
 
     /* define exception classes */
